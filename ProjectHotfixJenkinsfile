#!/usr/bin/env groovy
// Copyright 2020 Marcelo Riss
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

def credentialsId = "GitHub"
def repoAddressRoot = "github.com"
def repoAddress = "${repoAddressRoot}/MRISS-Projects/${GIT_PROJECT}.git"
def mavenConfigurationId = "default-maven-settings"
def branchName = getBranchName("${BRANCH_NAME}")

pipeline {
    agent any
    tools {
        maven 'Maven3'
        jdk 'JDK-11'
    }
    options {
        disableConcurrentBuilds()
    }
    stages {
        stage('Checkout') {
            steps {
                echo "Checking out the code: ${branchName}"
                sh "pwd; rm -rf *; rm -rf .git; rm -rf .gitignore"
                checkout changelog: false, poll: false, scm: [
                    $class: 'GitSCM', 
                    branches: [[name: "${branchName}"]],
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'LocalBranch', localBranch: "${branchName}"], [$class: 'WipeWorkspace']],
                    submoduleCfg: [], 
                    userRemoteConfigs: [[credentialsId: "${credentialsId}", url: "https://${repoAddress}"]]
                ]
            }
        }
        stage('Read pom.xml Info') {
            steps{
                 echo 'Reading pom.xml information...'
                 script {
                    hotfixReleaseNumber = "${currentVersionNumber}"
                    echo "Current Version Number: ${hotfixReleaseNumber}"
                    hotFixMavenArtifactId = "${mavenArtifactId}"
                    echo "Maven Artifact Id: ${hotFixMavenArtifactId}"
                 }
            }
        }
        stage("Build and Deploy Maven Release") {
            steps{
                echo 'Execute Release Build Using Default Release Values (increment last fix version number)...'
                withCredentials([string(credentialsId: 'gcloud-project-id', variable: 'GCLOUD_PROJECT_ID'),
                                 string(credentialsId: 'allowed-account', variable: 'ALLOWED_ACCOUNT_VAR'),
                                 string(credentialsId: 'allowed-sender-list', variable: 'ALLOWED_SENDER_LIST_VAR'),
                                 string(credentialsId: 'github-personal-token', variable: 'PERSONAL_TOKEN_VAR'),
                                 file(credentialsId: 'gcloud-service-account-1', variable: 'GCLOUD_SERVICE_ACCOUNT')]) {
                    configFileProvider(
                        [configFile(fileId: "${mavenConfigurationId}", variable: 'MAVEN_SETTINGS')]) {
                        
                        sh "mvn -gs $MAVEN_SETTINGS -B release:clean"
                        sh "mvn -gs $MAVEN_SETTINGS -B release:prepare"
                        sh "mvn -gs $MAVEN_SETTINGS -B release:perform"
                    }
                }
            }
        }
        stage("Post Release") {
            steps{
                echo 'Merges New Tag to Master Branch, Deploy Web Site , Update README at master branch.'
                sh "pwd; rm -rf target/checkout/*"
                script {
                    def currentTag = "v${hotfixReleaseNumber}"
                    checkout changelog: false, poll: false, scm: [
                        $class: 'GitSCM',
                        branches: [[name: "master"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'LocalBranch', localBranch: "master"], [$class: 'RelativeTargetDirectory', relativeTargetDir: "target/checkout"]],
                        submoduleCfg: [],
                        noTags: false,
                        userRemoteConfigs: [[credentialsId: "${credentialsId}", url: "https://${repoAddress}"]]
                    ]
                    // merge tag in currentTag into release branch
                    sh([script: "cd target/checkout; git merge -s recursive -X theirs --allow-unrelated-histories ${currentTag}; git status"])
                    // push
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${credentialsId}",
                        usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
                        sh "cd target/checkout; git push https://${GIT_USERNAME}:$GIT_PASSWORD@${repoAddress} master"
                    }
                    configFileProvider(
                        [configFile(fileId: "${mavenConfigurationId}", variable: 'MAVEN_SETTINGS')]) {
                        sh "cd target/checkout; pwd; mvn -gs $MAVEN_SETTINGS -B -Dsite.deployment.personal.main=file:///tmp/sites -P deployment,release-deployment site-deploy"
                        sh "cd target/checkout; pwd; mvn -gs $MAVEN_SETTINGS -B -P deployment,release-deployment process-resources"
                    }
                }
            }
        }
    }
}

def getCurrentVersionNumber() {
    def pom = readMavenPom file: 'pom.xml'
    return pom.version.replace("-SNAPSHOT", "")
}

def getMavenArtifactId() {
    def pom = readMavenPom file: 'pom.xml'
    return pom.artifactId
}

def getBranchName(branchName) {
    def slashIndex = branchName.indexOf("/")
    return branchName.substring(slashIndex+1)
}
